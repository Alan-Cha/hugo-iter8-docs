<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on iter8 Documentation</title>
    <link>/tutorials/</link>
    <description>Recent content in Tutorials on iter8 Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 09 Apr 2016 16:50:16 +0200</lastBuildDate>
    
	<atom:link href="/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Automated canary releases with iter8 on Kubernetes and Istio</title>
      <link>/tutorials/deployments/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>/tutorials/deployments/</guid>
      <description>This tutorial shows you how iter8 can be used to perform canary releases by gradually shifting traffic to a canary version of a microservice.
This tutorial has 5 parts, which are supposed to be tried in order. Here you will learn:
 how to perform a canary rollout with iter8; how to set different success criteria for iter8 to analyze canary releases and determine success or failure; how to have iter8 immediately stop an experiment as soon as a criterion is not met; how to use your own custom metrics in success criteria for canary analyses; and how iter8 can be used for canary releases of both internal and user-facing services.</description>
    </item>
    
    <item>
      <title>Automated Canary Rollout Using Services</title>
      <link>/tutorials/services/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>/tutorials/services/</guid>
      <description>In iter8 the versions of a service being compared can be specified using deployment names or using service names. Other tutorials showed how to specify different versions using Kubernetes deployment names. In this tutorial, we learn how to do a canary rollout of an application when different versions are indicated by different Kubernetes service names.
In this tutorial, we again consider the user facing service productpage of the bookinfo application and we learn how to create an iter8 Experiment that specifies the baseline and candidate versions using Kubernetes services.</description>
    </item>
    
  </channel>
</rss>